{"version":3,"file":"static/js/885.54c659be.chunk.js","mappings":"oLACA,MAA+B,mCAA/B,EAAqF,uCAArF,EAA+I,uCAA/I,EAA6O,2B,UCDhOA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAMnBC,EAAY,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAEjBC,EAAkB,SAAC,GAA0B,IAAxBJ,EAAuB,EAAvBA,SAAUG,EAAa,EAAbA,OACxC,IAAKA,EACD,OAAOH,EAASC,MAEpB,IAAMI,EAAmBF,EAAOG,cAOhC,OANeN,EAASC,MAAME,QAAO,YAAuB,IAApBI,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAC1C,OACID,EAAKD,cAAcG,SAASJ,IACzBG,EAAOF,cAAcG,SAASJ,EAExC,GAEF,E,4BCkBH,EA/BoB,WAClB,IAAML,GAAWU,EAAAA,EAAAA,IAAYN,GACvBO,GAAWC,EAAAA,EAAAA,MAMjB,OAJAC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,MACV,GAAE,CAACH,KAGF,eAAII,UAAWC,EAAf,SACuB,IAApBhB,EAASiB,OACRjB,EAASkB,KAAI,SAAAC,GAAO,OAClB,gBAAIJ,UAAWC,EAAf,WACI,0BAAG,kBAAMD,UAAWC,EAAjB,UAA4BG,EAAQZ,KAApC,QAAmDY,EAAQX,OAA9D,QAEF,mBACEO,UAAWC,EACXI,KAAK,SACLC,QAAS,kBAAMV,GAASW,EAAAA,EAAAA,IAAcH,EAAQI,IAArC,EAHX,sBAHwCJ,EAAQI,GADhC,KAcpB,kDAIP,ECnCD,EAA8B,4BAA9B,EAAyE,6B,UCiCzE,EA3Be,WAEb,IAAMZ,GAAWC,EAAAA,EAAAA,MACXT,GAASO,EAAAA,EAAAA,IAAYR,GAO3B,OACE,4BACE,eAAIa,UAAWC,EAAf,oCACA,kBACEI,KAAK,OACLb,KAAK,SACLiB,MAAOrB,EACPY,UAAWC,EACXS,QAAQ,yHACRC,SAde,SAAAC,GACnBhB,GAASiB,EAAAA,EAAAA,IAAaD,EAAIE,OAAOL,OAClC,MAgBF,EC7BD,EAAgC,oCAAhC,EAAmF,mCAAnF,EAAsI,oCAAtI,EAAyL,mCCKlL,SAASM,IAEd,IAAM9B,GAAWU,EAAAA,EAAAA,IAAYZ,GACvBa,GAAWC,EAAAA,EAAAA,MAsBjB,OACE,kBAAMmB,SApBa,SAAAJ,GACnBA,EAAIK,iBACJ,IAAMC,EAAON,EAAIE,OAAOK,SAEtBlC,EAASmC,MACP,SAAAhB,GAAO,OACLA,EAAQZ,KAAKD,cAAc8B,SAC3BH,EAAK1B,KAAKiB,MAAMlB,cAAc8B,MAFzB,KAKTC,MAAM,GAAD,OAAIJ,EAAK1B,KAAKiB,MAAd,4BACLG,EAAIW,cAAcC,UAElB5B,GAAS6B,EAAAA,EAAAA,IAAW,CAACjC,KAAM0B,EAAK1B,KAAKiB,MAAMhB,OAAQyB,EAAKzB,OAAOgB,SAC/DG,EAAIW,cAAcC,QAGpB,EAG8BxB,UAAWC,EAAzC,WACE,kBAAOD,UAAWC,EAAlB,mBACA,kBACEI,KAAK,OACLb,KAAK,OACLQ,UAAWC,EACXS,QAAQ,yHACRgB,MAAM,yIACNC,UAAQ,KAEV,kBAAO3B,UAAWC,EAAlB,qBACA,kBACEI,KAAK,MACLb,KAAK,SACLQ,UAAWC,EACXS,QAAQ,yFACRgB,MAAM,+FACNC,UAAQ,KAEV,mBAAQtB,KAAK,SAASL,UAAWC,EAAjC,2BAML,CCpDD,IAYA,EAZiB,WACf,OACI,iCACI,uCACA,SAACc,EAAD,KACA,sCACA,SAAC,EAAD,KACA,SAAC,EAAD,MAGT,C","sources":["webpack://react-homework-template/./src/components/contact-list/contact-list.module.css?97b9","redux/selectors.js","components/contact-list/ContactList.js","webpack://react-homework-template/./src/components/filter/filter.module.css?56b3","components/filter/Filter.js","webpack://react-homework-template/./src/components/contact-form/contact-form.module.css?abe5","components/contact-form/ContactForm.js","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list_contact\":\"contact-list_list_contact__iXfzw\",\"listItem_contact\":\"contact-list_listItem_contact__42pBK\",\"bttn_contactList\":\"contact-list_bttn_contactList__YkEUl\",\"hero-button\":\"contact-list_hero-button__vb5kB\",\"name\":\"contact-list_name__eoDaX\"};","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter; \n\nexport const filtredContacts = ({ contacts, filter }) => {     \n    if (!filter) { \n        return contacts.items\n    }\n    const normalizedFilter = filter.toLowerCase()\n    const result = contacts.items.filter(({ name, number }) => { \n        return (\n            name.toLowerCase().includes(normalizedFilter)\n            || number.toLowerCase().includes(normalizedFilter)\n        )\n    })\n    return result;   \n  }","import css from './contact-list.module.css';\nimport { useSelector } from 'react-redux';\nimport { filtredContacts } from '../../redux/selectors';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts, deleteContact } from '../../redux/operations';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const contacts = useSelector(filtredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.list_contact}>\n      {contacts.length !== 0 ? (\n        contacts.map(contact => (\n          <li className={css.listItem_contact} key={contact.id}>            \n              <p><span className={css.name}>{contact.name}: </span>{contact.number} </p>             \n            \n            <button\n              className={css.bttn_contactList}\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))\n      ) : (\n        <p>No data to display :(</p>\n      )}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"head_filter\":\"filter_head_filter__RlIc+\",\"input_filter\":\"filter_input_filter__VyUGQ\"};","import css from './filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from '../../redux/selectors';\nimport { changeFilter } from '../../redux/filterSlice'\n\n\n\nconst Filter = () => {\n\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = evt => { \n    dispatch(changeFilter(evt.target.value))    \n  }\n\n\n  return (\n    <div>\n      <h3 className={css.head_filter}>Find contacts by name</h3>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        className={css.input_filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\n\n\nexport default Filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"input_contact\":\"contact-form_input_contact__l828y\",\"form_contact\":\"contact-form_form_contact__rOZrt\",\"label_contact\":\"contact-form_label_contact__KqCrE\",\"bttn_contact\":\"contact-form_bttn_contact__qYSNV\",\"hero-button\":\"contact-form_hero-button__oPgb1\"};","import css from './contact-form.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/selectors';\nimport { addContact } from '../../redux/operations'\n\n\nexport function ContactForm() {\n \n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.target.elements;\n    if (\n      contacts.some(\n        contact =>\n          contact.name.toLowerCase().trim() ===\n          form.name.value.toLowerCase().trim()\n      )\n    ) {\n      alert(`${form.name.value} is already in contacts`);\n      evt.currentTarget.reset();\n    } else {\n      dispatch(addContact({name: form.name.value,number: form.number.value }));\n      evt.currentTarget.reset();\n    }\n    \n   };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form_contact}>\n      <label className={css.label_contact}>Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        className={css.input_contact}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <label className={css.label_contact}>Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        className={css.input_contact}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\" className={css.bttn_contact}>\n        Add contact\n      </button>\n    </form>\n  \n  );\n}\n\n\n","import ContactList from 'components/contact-list';\nimport Filter from 'components/filter';\nimport { ContactForm } from '../components/contact-form/ContactForm';\n\n\nconst Contacts = () => {\n  return (\n      <>\n          <h1>Phonebook</h1>\n          <ContactForm></ContactForm>\n          <h2>Contacts</h2>\n          <Filter></Filter>\n          <ContactList></ContactList>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["getContacts","state","contacts","items","getFilter","filter","filtredContacts","normalizedFilter","toLowerCase","name","number","includes","useSelector","dispatch","useDispatch","useEffect","fetchContacts","className","css","length","map","contact","type","onClick","deleteContact","id","value","pattern","onChange","evt","changeFilter","target","ContactForm","onSubmit","preventDefault","form","elements","some","trim","alert","currentTarget","reset","addContact","title","required"],"sourceRoot":""}